// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Assets = Assets || {};

/**
 * @const
 * @namespace
 */
Assets.Code = Assets.Code || {};

/**
 * @const
 * @namespace
 */
Assets.Code.Remote = Assets.Code.Remote || {};

/**
 * @const
 * @namespace
 */
Assets.Code.Remote.Flat = Assets.Code.Remote.Flat || {};

/**
 * @enum
 */
Assets.Code.Remote.Flat.AnimState = {
  Idle: 0,
  Walk: 1
};

/**
 * @enum
 */
Assets.Code.Remote.Flat.Data = {
  NONE: 0,
  PlayerData: 1,
  ShootData: 2,
  PlayerHitData: 3,
  PlayerDeathData: 4,
  PlayerRespawnData: 5
};

/**
 * @constructor
 */
Assets.Code.Remote.Flat.Vec3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Assets.Code.Remote.Flat.Vec3}
 */
Assets.Code.Remote.Flat.Vec3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
Assets.Code.Remote.Flat.Vec3.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
Assets.Code.Remote.Flat.Vec3.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
Assets.Code.Remote.Flat.Vec3.prototype.z = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
Assets.Code.Remote.Flat.Vec3.createVec3 = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * @constructor
 */
Assets.Code.Remote.Flat.PlayerData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Assets.Code.Remote.Flat.PlayerData}
 */
Assets.Code.Remote.Flat.PlayerData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Assets.Code.Remote.Flat.PlayerData=} obj
 * @returns {Assets.Code.Remote.Flat.PlayerData}
 */
Assets.Code.Remote.Flat.PlayerData.getRootAsPlayerData = function(bb, obj) {
  return (obj || new Assets.Code.Remote.Flat.PlayerData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {Assets.Code.Remote.Flat.Vec3=} obj
 * @returns {Assets.Code.Remote.Flat.Vec3}
 */
Assets.Code.Remote.Flat.PlayerData.prototype.position = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new Assets.Code.Remote.Flat.Vec3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {Assets.Code.Remote.Flat.Vec3=} obj
 * @returns {Assets.Code.Remote.Flat.Vec3}
 */
Assets.Code.Remote.Flat.PlayerData.prototype.rotation = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new Assets.Code.Remote.Flat.Vec3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {Assets.Code.Remote.Flat.AnimState}
 */
Assets.Code.Remote.Flat.PlayerData.prototype.state = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {Assets.Code.Remote.Flat.AnimState} */ (this.bb.readInt8(this.bb_pos + offset)) : Assets.Code.Remote.Flat.AnimState.Idle;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Assets.Code.Remote.Flat.PlayerData.startPlayerData = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} positionOffset
 */
Assets.Code.Remote.Flat.PlayerData.addPosition = function(builder, positionOffset) {
  builder.addFieldStruct(0, positionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rotationOffset
 */
Assets.Code.Remote.Flat.PlayerData.addRotation = function(builder, rotationOffset) {
  builder.addFieldStruct(1, rotationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Assets.Code.Remote.Flat.AnimState} state
 */
Assets.Code.Remote.Flat.PlayerData.addState = function(builder, state) {
  builder.addFieldInt8(2, state, Assets.Code.Remote.Flat.AnimState.Idle);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Assets.Code.Remote.Flat.PlayerData.endPlayerData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
Assets.Code.Remote.Flat.ShootData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Assets.Code.Remote.Flat.ShootData}
 */
Assets.Code.Remote.Flat.ShootData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Assets.Code.Remote.Flat.ShootData=} obj
 * @returns {Assets.Code.Remote.Flat.ShootData}
 */
Assets.Code.Remote.Flat.ShootData.getRootAsShootData = function(bb, obj) {
  return (obj || new Assets.Code.Remote.Flat.ShootData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {Assets.Code.Remote.Flat.Vec3=} obj
 * @returns {Assets.Code.Remote.Flat.Vec3}
 */
Assets.Code.Remote.Flat.ShootData.prototype.position = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new Assets.Code.Remote.Flat.Vec3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {Assets.Code.Remote.Flat.Vec3=} obj
 * @returns {Assets.Code.Remote.Flat.Vec3}
 */
Assets.Code.Remote.Flat.ShootData.prototype.direction = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new Assets.Code.Remote.Flat.Vec3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {boolean}
 */
Assets.Code.Remote.Flat.ShootData.prototype.alternate = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Assets.Code.Remote.Flat.ShootData.startShootData = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} positionOffset
 */
Assets.Code.Remote.Flat.ShootData.addPosition = function(builder, positionOffset) {
  builder.addFieldStruct(0, positionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} directionOffset
 */
Assets.Code.Remote.Flat.ShootData.addDirection = function(builder, directionOffset) {
  builder.addFieldStruct(1, directionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} alternate
 */
Assets.Code.Remote.Flat.ShootData.addAlternate = function(builder, alternate) {
  builder.addFieldInt8(2, +alternate, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Assets.Code.Remote.Flat.ShootData.endShootData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
Assets.Code.Remote.Flat.PlayerHitData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Assets.Code.Remote.Flat.PlayerHitData}
 */
Assets.Code.Remote.Flat.PlayerHitData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Assets.Code.Remote.Flat.PlayerHitData=} obj
 * @returns {Assets.Code.Remote.Flat.PlayerHitData}
 */
Assets.Code.Remote.Flat.PlayerHitData.getRootAsPlayerHitData = function(bb, obj) {
  return (obj || new Assets.Code.Remote.Flat.PlayerHitData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Assets.Code.Remote.Flat.PlayerHitData.prototype.currentHealth = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Assets.Code.Remote.Flat.PlayerHitData.startPlayerHitData = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} currentHealth
 */
Assets.Code.Remote.Flat.PlayerHitData.addCurrentHealth = function(builder, currentHealth) {
  builder.addFieldInt32(0, currentHealth, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Assets.Code.Remote.Flat.PlayerHitData.endPlayerHitData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
Assets.Code.Remote.Flat.PlayerDeathData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Assets.Code.Remote.Flat.PlayerDeathData}
 */
Assets.Code.Remote.Flat.PlayerDeathData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Assets.Code.Remote.Flat.PlayerDeathData=} obj
 * @returns {Assets.Code.Remote.Flat.PlayerDeathData}
 */
Assets.Code.Remote.Flat.PlayerDeathData.getRootAsPlayerDeathData = function(bb, obj) {
  return (obj || new Assets.Code.Remote.Flat.PlayerDeathData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
Assets.Code.Remote.Flat.PlayerDeathData.startPlayerDeathData = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Assets.Code.Remote.Flat.PlayerDeathData.endPlayerDeathData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
Assets.Code.Remote.Flat.PlayerRespawnData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Assets.Code.Remote.Flat.PlayerRespawnData}
 */
Assets.Code.Remote.Flat.PlayerRespawnData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Assets.Code.Remote.Flat.PlayerRespawnData=} obj
 * @returns {Assets.Code.Remote.Flat.PlayerRespawnData}
 */
Assets.Code.Remote.Flat.PlayerRespawnData.getRootAsPlayerRespawnData = function(bb, obj) {
  return (obj || new Assets.Code.Remote.Flat.PlayerRespawnData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {Assets.Code.Remote.Flat.Vec3=} obj
 * @returns {Assets.Code.Remote.Flat.Vec3}
 */
Assets.Code.Remote.Flat.PlayerRespawnData.prototype.position = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new Assets.Code.Remote.Flat.Vec3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Assets.Code.Remote.Flat.PlayerRespawnData.startPlayerRespawnData = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} positionOffset
 */
Assets.Code.Remote.Flat.PlayerRespawnData.addPosition = function(builder, positionOffset) {
  builder.addFieldStruct(0, positionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Assets.Code.Remote.Flat.PlayerRespawnData.endPlayerRespawnData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
Assets.Code.Remote.Flat.GameData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Assets.Code.Remote.Flat.GameData}
 */
Assets.Code.Remote.Flat.GameData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Assets.Code.Remote.Flat.GameData=} obj
 * @returns {Assets.Code.Remote.Flat.GameData}
 */
Assets.Code.Remote.Flat.GameData.getRootAsGameData = function(bb, obj) {
  return (obj || new Assets.Code.Remote.Flat.GameData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {boolean}
 */
Assets.Code.Remote.Flat.GameData.bufferHasIdentifier = function(bb) {
  return bb.__has_identifier('GAME');
};

/**
 * @returns {Assets.Code.Remote.Flat.Data}
 */
Assets.Code.Remote.Flat.GameData.prototype.dataType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {Assets.Code.Remote.Flat.Data} */ (this.bb.readUint8(this.bb_pos + offset)) : Assets.Code.Remote.Flat.Data.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
Assets.Code.Remote.Flat.GameData.prototype.data = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @returns {number}
 */
Assets.Code.Remote.Flat.GameData.prototype.playerId = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Assets.Code.Remote.Flat.GameData.startGameData = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Assets.Code.Remote.Flat.Data} dataType
 */
Assets.Code.Remote.Flat.GameData.addDataType = function(builder, dataType) {
  builder.addFieldInt8(0, dataType, Assets.Code.Remote.Flat.Data.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
Assets.Code.Remote.Flat.GameData.addData = function(builder, dataOffset) {
  builder.addFieldOffset(1, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} playerId
 */
Assets.Code.Remote.Flat.GameData.addPlayerId = function(builder, playerId) {
  builder.addFieldInt32(2, playerId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Assets.Code.Remote.Flat.GameData.endGameData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Assets.Code.Remote.Flat.GameData.finishGameDataBuffer = function(builder, offset) {
  builder.finish(offset, 'GAME');
};

// Exports for Node.js and RequireJS
this.Assets = Assets;
